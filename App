import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

import javax.swing.*;

public class App {
	static JFrame frame = new JFrame("Linear Algebra");
	static JLabel rowLabel, colLabel;
	static JTextField rowTextfield, colTextfield;
	static ArrayList<JTextField> matrix1TextFields = new ArrayList<JTextField>();
	static ArrayList<JTextField> matrix2TextFields = new ArrayList<JTextField>();
	static int cols, rows;
	static int[][] matrix1Arr;
	static int[][] matrix2Arr;

	public static void main(String[] args) {
		chooseOption();
	}

	public static void chooseOption() {
		JLabel title = title("What would you like to calculate", 150); // title function creates a label on top of the
																		// window with the inputted string
		// creates button with given dimensions (see method)
		JButton addition = button("Matrix Addition", 10, 50, 150, 50);
		JButton subtraction = button("Matrix Subtraction", 10, 110, 150, 50);
		JButton multiplication = button("Matrix Multiplication", 10, 170, 150, 50);

		ActionListener add = new ActionListener() {// creates an action that can be attached to a button that is pressed
			public void actionPerformed(ActionEvent e) {
				basicComputations(0);
			}
		};

		ActionListener sub = new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				basicComputations(1);
			}
		};

		ActionListener mult = new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				basicComputations(2);
			}
		};

		// attaches actions to buttons
		addition.addActionListener(add);
		subtraction.addActionListener(sub);
		multiplication.addActionListener(mult);

		// adding elements to frame
		frame.add(title);
		frame.add(addition);
		frame.add(subtraction);
		frame.add(multiplication);

		// specifying frame dimensions
		frame.setSize(600, 300);
		frame.setLayout(null);
		frame.setVisible(true);
	}

	public static void basicComputations(int x) {// both addition and subtraction depending on value of adding
		clearFrame();
		JLabel title;
		if (x == 0) {
			title = title("Matrix Addition", 225);
		} else if (x == 1) {
			title = title("Matrix Subtraction", 225);
		} else {
			title = title("Matrix Multiplication", 225);
		}

		displayRowAndColEntry(10, 50); // method creates input row and col text and the box with it
		JButton button = button("Submit", 10, 100, 100, 40);

		// adding created buttons, text, and textfields to the window
		frame.add(title);
		frame.add(button);

		ActionListener a = new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// sets integer value rows and cols to whatever text is in the corresponding
				// boxes
				rows = Integer.parseInt(rowTextfield.getText());
				cols = Integer.parseInt(colTextfield.getText());
				clearFrame(); // clears the window

				/// adds input matrix text and makes input boxes corresponding to the number of
				/// cols and rows
				displayInputMatrix(10, 50, 1);
				displayInputMatrix(300, 50, 2);

				JButton button = button("Calculate", 10, 10, 100, 40);

				frame.add(button);
				frame.add(title);

				ActionListener a = new ActionListener() {
					public void actionPerformed(ActionEvent e) {
						createMatrixArrays(); // creates a 2d int array and fills entries based on what was inputted in
												// the boxes

						// creates two matrix objects using the new arrays
						Matrix matrix1 = new Matrix(matrix1Arr);
						Matrix matrix2 = new Matrix(matrix2Arr);

						Matrix result;
						if (x == 0) {
							result = matrix1.add(matrix2);
						} 
						else if (x == 1) {
							result = matrix1.sub(matrix2);
						} 
						else {
							result = matrix1.mult(matrix2);
						}

						clearFrame();

						displayMatrix(result, 10, 40, "Result", true); // method to display matrix on window with given
																		// x and y

						frame.add(title);
					}

				};

				button.addActionListener(a); // attaches second action event to the calculate button

			}

		};

		button.addActionListener(a); // attaches first action event to the submit button
	}

	public static JLabel title(String s, int x) {// creates a title in the center of the screen

		JLabel title = new JLabel(s);
		title.setFont(new Font("", 100, 20));
		title.setBounds(x, 10, 2000, 30);
		return title;
	}

	public static JLabel header(String s, int x, int y) {// creates text at given x and y coordinate
		JLabel header = new JLabel(s);
		header.setFont(new Font("", 0, 15));
		header.setBounds(x, y, 100, 20);
		return header;
	}

	// creates input row and col text and text boxes at given x and y
	public static void displayRowAndColEntry(int x, int y) {
		rowLabel = new JLabel("Input rows");
		rowLabel.setFont(new Font("", 0, 15));
		rowLabel.setBounds(x, y, 100, 20);

		rowTextfield = new JTextField("", 20);
		rowTextfield.setFont(new Font("", 50, 15));
		rowTextfield.setBounds(x + 75, y + 2, 30, 20);

		colLabel = new JLabel("Input columns");
		colLabel.setFont(new Font("", 50, 15));
		colLabel.setBounds(x, y + 20, 100, 20);

		colTextfield = new JTextField("", 20);
		colTextfield.setFont(new Font("", 50, 15));
		colTextfield.setBounds(x + 102, y + 22, 30, 20);

		frame.add(colLabel);
		frame.add(colTextfield);
		frame.add(rowLabel);
		frame.add(rowTextfield);
	}

	public static void displayInputMatrix(int x, int y, int n) {// Creates a series of text boxes in the shape matrix
																// with inputted rows and columns
		int startx = x;
		JLabel matrixTitle = new JLabel("Input Matrix " + n);
		matrixTitle.setFont(new Font("", 0, 15));
		matrixTitle.setBounds(x, y, 100, 20);

		y += 22;

		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
				JTextField tempTextField = new JTextField("", 20);
				tempTextField.setFont(new Font("", 50, 15));
				tempTextField.setBounds(x, y, 30, 20);
				if (n == 1) {// value of n decides if this goes in to matrix1's field or matrix 2's
					matrix1TextFields.add(tempTextField);
				} else {
					matrix2TextFields.add(tempTextField);
				}

				frame.add(tempTextField);
				x += 30; // moves next box to the right
			}
			x = startx; // resets x value
			y += 20; // moves next row of text boxes lower
		}

		frame.add(matrixTitle);

	}

	public static JButton button(String s, int x, int y, int length, int width) {// creates button with given dimension
		JButton button = new JButton(s);
		button.setBounds(x, y, length, width);
		return button;

	}

	public static void createMatrixArrays() {// Goes through array of textbox entrys and moves them into 2d arrays
		int x = 0;
		matrix1Arr = new int[rows][cols];
		matrix2Arr = new int[rows][cols];

		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
				matrix1Arr[i][j] = Integer.parseInt(matrix1TextFields.get(x).getText());
				matrix2Arr[i][j] = Integer.parseInt(matrix2TextFields.get(x).getText());
				x++;
			}
		}
	}

	public static void clearFrame() {
		frame.getContentPane().removeAll();
		frame.getContentPane().repaint();
	}

	// displays inputted matrix with given dimensions with option to give it a
	// header
	public static void displayMatrix(Matrix m, int x, int y, String s, boolean string) {
		if (string) {
			JLabel resultTitle = header(s, 10, 20);
			frame.add(resultTitle);
		}

		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
				JLabel temp = new JLabel("" + m.getElement(i, j));
				temp.setFont(new Font("", 50, 15));
				temp.setBounds(x, y, 100, 20);
				frame.add(temp);
				x += 30;
			}
			x = 10;
			y += 20;
		}
	}

}
